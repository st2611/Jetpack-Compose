Subject: [PATCH] Add gitignore file
---
Index: app/src/main/java/com/example/jetpackcompose/MainActivity.kt
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/MainActivity.kt b/app/src/main/java/com/example/jetpackcompose/MainActivity.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/jetpackcompose/MainActivity.kt	(revision 0c86c2e8f872ece6b5174a54793255bceb56773d)
+++ /dev/null	(revision 0c86c2e8f872ece6b5174a54793255bceb56773d)
@@ -1,44 +0,0 @@
-package com.example.jetpackcompose
-
-import android.os.Bundle
-import androidx.activity.ComponentActivity
-import androidx.activity.compose.setContent
-import androidx.activity.enableEdgeToEdge
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Done
-import androidx.compose.material3.Icon
-import androidx.compose.material3.Surface
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.tooling.preview.Preview
-import com.example.jetpackcompose.ui.theme.JetpackComposeTheme
-
-class MainActivity : ComponentActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        enableEdgeToEdge()
-        setContent {
-            Surface {
-                Greeting(
-                    name = "Vu Hoang Manh"
-                )
-            }
-        }
-    }
-}
-
-@Composable
-fun Greeting(name: String) {
-    Icon(Icons.Default.Done, contentDescription = "")
-    Text(
-        text = "Hello $name",
-    )
-}
-
-@Preview(showBackground = true)
-@Composable
-fun GreetingPreview() {
-    JetpackComposeTheme {
-        Greeting("Vu Hoang Manh")
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/screen/task/AddTaskScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/screen/task/AddTaskScreen.kt b/app/src/main/java/com/example/jetpackcompose/screen/task/AddTaskScreen.kt
new file mode 100644
--- /dev/null	(date 1741444672693)
+++ b/app/src/main/java/com/example/jetpackcompose/screen/task/AddTaskScreen.kt	(date 1741444672693)
@@ -0,0 +1,169 @@
+package com.example.jetpackcompose.screen.task
+
+import android.app.DatePickerDialog
+import android.app.TimePickerDialog
+import android.content.Context
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.width
+import androidx.compose.material3.Button
+import androidx.compose.material3.DropdownMenu
+import androidx.compose.material3.DropdownMenuItem
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.unit.dp
+import com.example.jetpackcompose.R
+import com.example.jetpackcompose.const.FORMAT_DATE
+import com.example.jetpackcompose.toast.showCustomToast
+import com.example.jetpackcompose.viewmodel.TaskViewModel
+import java.text.SimpleDateFormat
+import java.util.Calendar
+import java.util.Date
+import java.util.Locale
+
+@Composable
+fun AddTaskScreen(
+    viewModel: TaskViewModel,
+    onNavigateToDisplayTask: () -> Unit
+) {
+    var title by remember { mutableStateOf("") }
+    var description by remember { mutableStateOf("") }
+    var priority by remember { mutableIntStateOf(1) }
+    var dueDate by remember { mutableStateOf<Long?>(null) }
+
+    val calendar = Calendar.getInstance()
+    val formattedDueDate = dueDate?.let {
+        SimpleDateFormat(FORMAT_DATE, Locale.getDefault()).format(Date(it))
+    } ?: stringResource(id = R.string.select_date_time)
+
+    val isFormValid = title.isNotBlank() && description.isNotBlank() && dueDate != null
+
+    Column(modifier = Modifier.padding(16.dp)) {
+        OutlinedTextField(
+            value = title,
+            onValueChange = { title = it },
+            label = { Text(stringResource(id = R.string.title)) },
+            modifier = Modifier.fillMaxWidth()
+        )
+
+        OutlinedTextField(
+            value = description,
+            onValueChange = { description = it },
+            label = { Text(stringResource(id = R.string.description)) },
+            modifier = Modifier.fillMaxWidth()
+        )
+
+        Row(verticalAlignment = Alignment.CenterVertically) {
+            Text(stringResource(id = R.string.priority))
+            Spacer(modifier = Modifier.width(8.dp))
+            DropdownMenuComponent(
+                selectedPriority = priority,
+                onPrioritySelected = { priority = it }
+            )
+        }
+
+        val context = LocalContext.current
+
+        Button(
+            onClick = {
+                showDatePicker(context, calendar) { selectedTime ->
+                    dueDate = selectedTime
+                }
+            },
+            modifier = Modifier.fillMaxWidth()
+        ) {
+            Text(formattedDueDate)
+        }
+
+
+        Button(
+            onClick = {
+                if (isFormValid) {
+                    viewModel.addTask(title, description.ifBlank { null }, priority, dueDate)
+                    onNavigateToDisplayTask()
+                } else {
+                    context.showCustomToast(context.getString(R.string.complete_all_the_information), isLong = true)
+                }
+
+            },
+            modifier = Modifier.fillMaxWidth()
+        ) {
+            Text(stringResource(id = R.string.add_task))
+        }
+
+        Spacer(modifier = Modifier.height(10.dp))
+
+        Button(
+            onClick = {
+                onNavigateToDisplayTask()
+            },
+            modifier = Modifier.fillMaxWidth()
+        ) {
+            Text(stringResource(id = R.string.back))
+        }
+    }
+}
+
+@Composable
+fun DropdownMenuComponent(selectedPriority: Int, onPrioritySelected: (Int) -> Unit) {
+    var expanded by remember { mutableStateOf(false) }
+    val priorities = listOf(1, 2, 3)
+
+    Box {
+        Button(onClick = { expanded = true }) {
+            Text("${stringResource(id = R.string.priority)} $selectedPriority")
+        }
+        DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
+            priorities.forEach { priority ->
+                DropdownMenuItem(text = { Text("${stringResource(id = R.string.level)} $priority") }, onClick = {
+                    onPrioritySelected(priority)
+                    expanded = false
+                })
+            }
+        }
+    }
+}
+
+fun showDatePicker(context: Context, calendar: Calendar, onDateTimeSelected: (Long) -> Unit) {
+    DatePickerDialog(
+        context,
+        { _, year, month, day ->
+            calendar.set(year, month, day)
+            showTimePicker(context, calendar, onDateTimeSelected)
+        },
+        calendar.get(Calendar.YEAR),
+        calendar.get(Calendar.MONTH),
+        calendar.get(Calendar.DAY_OF_MONTH)
+    ).show()
+}
+
+fun showTimePicker(context: Context, calendar: Calendar, onDateTimeSelected: (Long) -> Unit) {
+    TimePickerDialog(
+        context,
+        { _, hour, minute ->
+            calendar.set(Calendar.HOUR_OF_DAY, hour)
+            calendar.set(Calendar.MINUTE, minute)
+            onDateTimeSelected(calendar.timeInMillis)
+        },
+        calendar.get(Calendar.HOUR_OF_DAY),
+        calendar.get(Calendar.MINUTE),
+        true
+    ).show()
+}
+
+
Index: app/src/main/java/com/example/jetpackcompose/screen/main/MainTab.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/screen/main/MainTab.kt b/app/src/main/java/com/example/jetpackcompose/screen/main/MainTab.kt
new file mode 100644
--- /dev/null	(date 1741442983802)
+++ b/app/src/main/java/com/example/jetpackcompose/screen/main/MainTab.kt	(date 1741442983802)
@@ -0,0 +1,15 @@
+package com.example.jetpackcompose.screen.main
+
+import androidx.annotation.StringRes
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Build
+import androidx.compose.material.icons.filled.DateRange
+import androidx.compose.material.icons.filled.Menu
+import androidx.compose.ui.graphics.vector.ImageVector
+import com.example.jetpackcompose.R
+
+enum class MainTab (@StringRes val title:Int, val icon: ImageVector) {
+    TASKS(R.string.tasks, Icons.Default.Menu),
+    POMODORO(R.string.pomodoro, Icons.Default.DateRange),
+    STATS(R.string.stats, Icons.Default.Build)
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/model/entity/TaskEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/model/entity/TaskEntity.kt b/app/src/main/java/com/example/jetpackcompose/model/entity/TaskEntity.kt
new file mode 100644
--- /dev/null	(date 1741361166636)
+++ b/app/src/main/java/com/example/jetpackcompose/model/entity/TaskEntity.kt	(date 1741361166636)
@@ -0,0 +1,14 @@
+package com.example.jetpackcompose.model.entity
+
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+
+@Entity(tableName = "tasks")
+data class TaskEntity(
+    @PrimaryKey(autoGenerate = true) val id: Int = 0,
+    val title: String,
+    val description: String?,
+    val priority: Int, // 1 = High, 2 = Medium, 3 = Low
+    val isCompleted: Int = 0, // 0: working, 1: completed
+    val dueDate: Long? // Timestamp
+)
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/model/database/TaskDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/model/database/TaskDatabase.kt b/app/src/main/java/com/example/jetpackcompose/model/database/TaskDatabase.kt
new file mode 100644
--- /dev/null	(date 1741361223089)
+++ b/app/src/main/java/com/example/jetpackcompose/model/database/TaskDatabase.kt	(date 1741361223089)
@@ -0,0 +1,30 @@
+package com.example.jetpackcompose.model.database
+
+import android.content.Context
+import androidx.room.Database
+import androidx.room.Room
+import androidx.room.RoomDatabase
+import com.example.jetpackcompose.model.dao.TaskDao
+import com.example.jetpackcompose.model.entity.TaskEntity
+
+@Database(entities = [TaskEntity::class], version = 1, exportSchema = false)
+abstract class TaskDatabase : RoomDatabase() {
+    abstract fun taskDao(): TaskDao
+
+    companion object {
+        @Volatile
+        private var INSTANCE: TaskDatabase? = null
+
+        fun getDatabase(context: Context): TaskDatabase {
+            return INSTANCE ?: synchronized(this) {
+                val instance = Room.databaseBuilder(
+                    context.applicationContext,
+                    TaskDatabase::class.java,
+                    "task_database"
+                ).build()
+                INSTANCE = instance
+                instance
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/model/module/TaskModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/model/module/TaskModule.kt b/app/src/main/java/com/example/jetpackcompose/model/module/TaskModule.kt
new file mode 100644
--- /dev/null	(date 1741361261055)
+++ b/app/src/main/java/com/example/jetpackcompose/model/module/TaskModule.kt	(date 1741361261055)
@@ -0,0 +1,32 @@
+package com.example.jetpackcompose.model.module
+
+import android.content.Context
+import androidx.room.Room
+import com.example.jetpackcompose.model.dao.TaskDao
+import com.example.jetpackcompose.model.database.TaskDatabase
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
+import javax.inject.Singleton
+
+@Module
+@InstallIn(SingletonComponent::class)
+object TaskModule {
+
+    @Provides
+    @Singleton
+    fun provideDatabase(@ApplicationContext context: Context): TaskDatabase {
+        return Room.databaseBuilder(
+            context,
+            TaskDatabase::class.java,
+            "task_database"
+        ).build()
+    }
+
+    @Provides
+    fun provideTaskDao(database: TaskDatabase): TaskDao {
+        return database.taskDao()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/model/dao/TaskDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/model/dao/TaskDao.kt b/app/src/main/java/com/example/jetpackcompose/model/dao/TaskDao.kt
new file mode 100644
--- /dev/null	(date 1741433353529)
+++ b/app/src/main/java/com/example/jetpackcompose/model/dao/TaskDao.kt	(date 1741433353529)
@@ -0,0 +1,41 @@
+package com.example.jetpackcompose.model.dao
+
+import androidx.room.Dao
+import androidx.room.Delete
+import androidx.room.Insert
+import androidx.room.OnConflictStrategy
+import androidx.room.Query
+import androidx.room.Update
+import com.example.jetpackcompose.model.entity.TaskEntity
+import kotlinx.coroutines.flow.Flow
+
+@Dao
+interface TaskDao {
+
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    suspend fun insertTask(task: TaskEntity)
+
+    @Update
+    suspend fun updateTask(task: TaskEntity)
+
+    @Delete
+    suspend fun deleteTask(task: TaskEntity)
+
+    @Query("SELECT * FROM tasks ORDER BY isCompleted ASC, dueDate ASC, priority ASC")
+    fun getAllTasks(): Flow<List<TaskEntity>>
+
+    @Query("SELECT * FROM tasks WHERE id = :taskId")
+    suspend fun getTaskById(taskId: Int): TaskEntity?
+
+
+    @Query("SELECT COUNT (*) FROM tasks WHERE isCompleted = 0")
+    fun getInCompletedTaskCount(): Flow<Int>
+
+    @Query("SELECT COUNT (*) FROM tasks WHERE isCompleted = 1")
+    fun getCompletedTaskCount(): Flow<Int>
+
+    @Query("SELECT * FROM tasks WHERE isCompleted = 1 ORDER BY dueDate ASC LIMIT 1")
+    suspend fun getOldestCompletedTask(): TaskEntity?
+
+
+}
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 0c86c2e8f872ece6b5174a54793255bceb56773d)
+++ b/app/src/main/res/values/strings.xml	(date 1741444960879)
@@ -1,3 +1,17 @@
 <resources>
     <string name="app_name">Jetpack Compose</string>
+    <string name="tasks">Tasks</string>
+    <string name="pomodoro">Pomodoro</string>
+    <string name="stats">Stats</string>
+    <string name="select_date_time">Select date and time</string>
+    <string name="description">Description</string>
+    <string name="title">Title</string>
+    <string name="priority">Priority:</string>
+    <string name="add_task">Add Task</string>
+    <string name="back">Back</string>
+    <string name="level">Level</string>
+    <string name="task_list">Task List</string>
+    <string name="deadline">Deadline:</string>
+    <string name="complete_all_the_information">Please complete all the information of the task</string>
+    <string name="the_number_of_task_reach_limit">The number of tasks has reached the limit. Please complete the old task before adding another task.</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/repository/TaskRepo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/repository/TaskRepo.kt b/app/src/main/java/com/example/jetpackcompose/repository/TaskRepo.kt
new file mode 100644
--- /dev/null	(date 1741433326476)
+++ b/app/src/main/java/com/example/jetpackcompose/repository/TaskRepo.kt	(date 1741433326476)
@@ -0,0 +1,27 @@
+package com.example.jetpackcompose.repository
+
+import com.example.jetpackcompose.model.dao.TaskDao
+import com.example.jetpackcompose.model.entity.TaskEntity
+import kotlinx.coroutines.flow.Flow
+import javax.inject.Inject
+
+class TaskRepository @Inject constructor(private val taskDao: TaskDao) {
+
+    fun getAllTasks(): Flow<List<TaskEntity>> = taskDao.getAllTasks()
+
+    suspend fun insertTask(task: TaskEntity) = taskDao.insertTask(task)
+
+    suspend fun updateTask(task: TaskEntity) = taskDao.updateTask(task)
+
+    suspend fun deleteTask(task: TaskEntity) = taskDao.deleteTask(task)
+
+    fun getInCompletedTaskCount(): Flow<Int> = taskDao.getInCompletedTaskCount()
+
+    fun getCompletedTaskCount(): Flow<Int> = taskDao.getCompletedTaskCount()
+
+    suspend fun getOldestCompletedTask(): TaskEntity? {
+        return taskDao.getOldestCompletedTask()
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/const/Const.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/const/Const.kt b/app/src/main/java/com/example/jetpackcompose/const/Const.kt
new file mode 100644
--- /dev/null	(date 1741444960866)
+++ b/app/src/main/java/com/example/jetpackcompose/const/Const.kt	(date 1741444960866)
@@ -0,0 +1,5 @@
+package com.example.jetpackcompose.const
+
+const val FORMAT_DATE = "HH:mm dd/MM/yyyy"
+const val DISPLAY_TASK_SCREEN = "display_task_screen"
+const val ADD_TASK_SCREEN = "add_task_screen"
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/screen/task/TaskScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/screen/task/TaskScreen.kt b/app/src/main/java/com/example/jetpackcompose/screen/task/TaskScreen.kt
new file mode 100644
--- /dev/null	(date 1741444960872)
+++ b/app/src/main/java/com/example/jetpackcompose/screen/task/TaskScreen.kt	(date 1741444960872)
@@ -0,0 +1,27 @@
+package com.example.jetpackcompose.screen.task
+
+import androidx.compose.runtime.Composable
+import androidx.hilt.navigation.compose.hiltViewModel
+import androidx.navigation.NavHostController
+import androidx.navigation.compose.NavHost
+import androidx.navigation.compose.composable
+import com.example.jetpackcompose.const.ADD_TASK_SCREEN
+import com.example.jetpackcompose.const.DISPLAY_TASK_SCREEN
+import com.example.jetpackcompose.viewmodel.TaskViewModel
+
+@Composable
+fun TaskScreen(viewModel: TaskViewModel = hiltViewModel(), navController: NavHostController) {
+    NavHost(navController, startDestination = DISPLAY_TASK_SCREEN) {
+        composable(DISPLAY_TASK_SCREEN) {
+            DisplayTaskScreen(
+                viewModel = viewModel,
+                onNavigateToAddTask = { navController.navigate(ADD_TASK_SCREEN) })
+        }
+        composable(ADD_TASK_SCREEN) {
+            AddTaskScreen(
+                viewModel = viewModel,
+                onNavigateToDisplayTask = {navController.popBackStack()}
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/viewmodel/TaskViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/viewmodel/TaskViewModel.kt b/app/src/main/java/com/example/jetpackcompose/viewmodel/TaskViewModel.kt
new file mode 100644
--- /dev/null	(date 1741433923874)
+++ b/app/src/main/java/com/example/jetpackcompose/viewmodel/TaskViewModel.kt	(date 1741433923874)
@@ -0,0 +1,50 @@
+package com.example.jetpackcompose.viewmodel
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.example.jetpackcompose.model.entity.TaskEntity
+import com.example.jetpackcompose.repository.TaskRepository
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.SharingStarted
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.flow.stateIn
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class TaskViewModel @Inject constructor(private val repository: TaskRepository) : ViewModel() {
+
+    val tasks: StateFlow<List<TaskEntity>> = repository.getAllTasks()
+        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())
+
+    fun addTask(title: String, description: String?, priority: Int, dueDate: Long?) =
+        viewModelScope.launch {
+            val newTask = TaskEntity(
+                title = title,
+                description = description,
+                priority = priority,
+                dueDate = dueDate
+            )
+            repository.insertTask(newTask)
+        }
+
+    fun markAsCompleted(task: TaskEntity, completedCount: Int) = viewModelScope.launch {
+        if (completedCount >= 3) {
+            val oldestCompletedTask = repository.getOldestCompletedTask()
+            oldestCompletedTask?.let {
+                repository.deleteTask(it)
+            }
+        }
+        repository.updateTask(task.copy(isCompleted = 1))
+    }
+
+    fun deleteTask(task: TaskEntity) = viewModelScope.launch {
+        repository.deleteTask(task)
+    }
+
+    val completedTaskCount: StateFlow<Int> = repository.getCompletedTaskCount()
+        .stateIn(viewModelScope, SharingStarted.Lazily, 0)
+
+    val incompleteTaskCount: StateFlow<Int> = repository.getInCompletedTaskCount()
+        .stateIn(viewModelScope, SharingStarted.Lazily, 0)
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/screen/task/DisplayTaskScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/screen/task/DisplayTaskScreen.kt b/app/src/main/java/com/example/jetpackcompose/screen/task/DisplayTaskScreen.kt
new file mode 100644
--- /dev/null	(date 1741444960885)
+++ b/app/src/main/java/com/example/jetpackcompose/screen/task/DisplayTaskScreen.kt	(date 1741444960885)
@@ -0,0 +1,118 @@
+package com.example.jetpackcompose.screen.task
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.items
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Add
+import androidx.compose.material.icons.filled.Check
+import androidx.compose.material.icons.filled.Delete
+import androidx.compose.material3.Button
+import androidx.compose.material3.Card
+import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.ExperimentalMaterial3Api
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.Text
+import androidx.compose.material3.TopAppBar
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.res.stringResource
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import com.example.jetpackcompose.R
+import com.example.jetpackcompose.const.FORMAT_DATE
+import com.example.jetpackcompose.model.entity.TaskEntity
+import com.example.jetpackcompose.toast.showCustomToast
+import com.example.jetpackcompose.viewmodel.TaskViewModel
+import java.text.SimpleDateFormat
+import java.util.Date
+import java.util.Locale
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun DisplayTaskScreen(
+    viewModel: TaskViewModel,
+    onNavigateToAddTask: () -> Unit
+) {
+    val tasks by viewModel.tasks.collectAsState()
+    val incompleteTaskCount by viewModel.incompleteTaskCount.collectAsState()
+    val completedTaskCount by viewModel.completedTaskCount.collectAsState()
+    val context = LocalContext.current
+
+    Column {
+        TopAppBar(
+            title = { Text(stringResource(id = R.string.task_list)) },
+            actions = {
+                IconButton(onClick = {
+                    if (incompleteTaskCount == 20) {
+                        context.showCustomToast(context.getString(R.string.the_number_of_task_reach_limit), isLong = true)
+                    } else {
+                        onNavigateToAddTask.invoke()
+                    }
+                }) {
+                    Icon(Icons.Default.Add, contentDescription = stringResource(id = R.string.add_task))
+                }
+            }
+        )
+
+        LazyColumn {
+            items(tasks) { task ->
+                TaskItem(task, onCompleted = { viewModel.markAsCompleted(task, completedTaskCount) }, onDelete = {viewModel.deleteTask(task)})
+            }
+        }
+    }
+}
+
+@Composable
+fun TaskItem(task: TaskEntity, onCompleted: () -> Unit, onDelete: () -> Unit) {
+    Card(
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(8.dp)
+            .clickable { },
+        colors = CardDefaults.cardColors(
+            containerColor = if (task.isCompleted == 1) Color.LightGray else Color.White
+        )
+    ) {
+        Row {
+            Column(modifier = Modifier
+                .padding(16.dp)
+                .weight(1f)) {
+                Text(task.title, fontWeight = FontWeight.Bold)
+                Text("${stringResource(id = R.string.priority)} ${task.priority}")
+                task.dueDate?.let {
+                    val formattedDate = SimpleDateFormat(FORMAT_DATE, Locale.getDefault()).format(Date(it))
+                    Text("${stringResource(id = R.string.deadline)} $formattedDate")
+                }
+                task.description?.let { Text(it, fontSize = 14.sp, color = Color.Gray) }
+            }
+            Button(
+                onClick = { onCompleted() },
+                modifier = Modifier.align(Alignment.CenterVertically)
+            ) {
+                Icon(
+                    imageVector = Icons.Default.Check,
+                    contentDescription = "Completed",
+                    tint = if (task.isCompleted == 1) Color(0xFF4CAF50) else Color.Gray
+                )
+            }
+            Button(
+                onClick = { onDelete.invoke() },
+                modifier = Modifier.align(Alignment.CenterVertically)
+            ) {
+                Icon(imageVector = Icons.Default.Delete, contentDescription = "Delete")
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/activity/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/activity/MainActivity.kt b/app/src/main/java/com/example/jetpackcompose/activity/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1741442703688)
+++ b/app/src/main/java/com/example/jetpackcompose/activity/MainActivity.kt	(date 1741442703688)
@@ -0,0 +1,22 @@
+package com.example.jetpackcompose.activity
+
+import android.os.Bundle
+import androidx.activity.ComponentActivity
+import androidx.activity.compose.setContent
+import androidx.activity.enableEdgeToEdge
+import androidx.navigation.compose.rememberNavController
+import com.example.jetpackcompose.screen.main.MainScreen
+import dagger.hilt.android.AndroidEntryPoint
+
+@AndroidEntryPoint
+class MainActivity : ComponentActivity() {
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        enableEdgeToEdge()
+        setContent {
+            val navController = rememberNavController()
+            MainScreen(navController = navController)
+        }
+    }
+}
Index: app/src/main/java/com/example/jetpackcompose/screen/main/MainScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/screen/main/MainScreen.kt b/app/src/main/java/com/example/jetpackcompose/screen/main/MainScreen.kt
new file mode 100644
--- /dev/null	(date 1741443296157)
+++ b/app/src/main/java/com/example/jetpackcompose/screen/main/MainScreen.kt	(date 1741443296157)
@@ -0,0 +1,59 @@
+package com.example.jetpackcompose.screen.main
+
+import androidx.compose.foundation.ExperimentalFoundationApi
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.WindowInsets
+import androidx.compose.foundation.layout.asPaddingValues
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.statusBars
+import androidx.compose.foundation.pager.HorizontalPager
+import androidx.compose.foundation.pager.rememberPagerState
+import androidx.compose.material3.Icon
+import androidx.compose.material3.Tab
+import androidx.compose.material3.TabRow
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.res.stringResource
+import androidx.navigation.NavHostController
+import com.example.jetpackcompose.screen.pomodoro.PomodoroScreen
+import com.example.jetpackcompose.screen.statscreen.StatsScreen
+import com.example.jetpackcompose.screen.task.TaskScreen
+import kotlinx.coroutines.launch
+
+@OptIn(ExperimentalFoundationApi::class)
+@Composable
+fun MainScreen(navController: NavHostController) {
+    val tabs = MainTab.entries.toTypedArray()
+    val pagerState = rememberPagerState(pageCount = {tabs.size})
+    val coroutineScope = rememberCoroutineScope()
+
+    Column(modifier = Modifier
+        .fillMaxSize()
+        .padding(WindowInsets.statusBars.asPaddingValues())) {
+        //Tab Layout
+        TabRow(selectedTabIndex = pagerState.currentPage) {
+            tabs.forEachIndexed { index, tab ->
+                Tab(
+                    selected = pagerState.currentPage == index,
+                    onClick = {
+                        coroutineScope.launch { pagerState.animateScrollToPage(index) }
+                    },
+                    text = { Text(text = stringResource(id = tab.title)) },
+                    icon = { Icon(tab.icon, contentDescription = stringResource(id = tab.title)) }
+                )
+            }
+        }
+
+        // Content of each tab
+        HorizontalPager(state = pagerState) { page ->
+            when(tabs[page]) {
+                MainTab.TASKS -> TaskScreen(navController = navController)
+                MainTab.POMODORO -> PomodoroScreen()
+                MainTab.STATS -> StatsScreen()
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/MyApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/MyApplication.kt b/app/src/main/java/com/example/jetpackcompose/MyApplication.kt
new file mode 100644
--- /dev/null	(date 1741427904163)
+++ b/app/src/main/java/com/example/jetpackcompose/MyApplication.kt	(date 1741427904163)
@@ -0,0 +1,8 @@
+package com.example.jetpackcompose
+
+import android.app.Application
+import dagger.hilt.android.HiltAndroidApp
+
+@HiltAndroidApp
+class MyApplication: Application() {
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/screen/pomodoro/PomodoroScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/screen/pomodoro/PomodoroScreen.kt b/app/src/main/java/com/example/jetpackcompose/screen/pomodoro/PomodoroScreen.kt
new file mode 100644
--- /dev/null	(date 1741361644095)
+++ b/app/src/main/java/com/example/jetpackcompose/screen/pomodoro/PomodoroScreen.kt	(date 1741361644095)
@@ -0,0 +1,8 @@
+package com.example.jetpackcompose.screen.pomodoro
+
+import androidx.compose.runtime.Composable
+
+@Composable
+fun PomodoroScreen() {
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/jetpackcompose/screen/statscreen/StatsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/screen/statscreen/StatsScreen.kt b/app/src/main/java/com/example/jetpackcompose/screen/statscreen/StatsScreen.kt
new file mode 100644
--- /dev/null	(date 1741361789624)
+++ b/app/src/main/java/com/example/jetpackcompose/screen/statscreen/StatsScreen.kt	(date 1741361789624)
@@ -0,0 +1,8 @@
+package com.example.jetpackcompose.screen.statscreen
+
+import androidx.compose.runtime.Composable
+
+@Composable
+fun StatsScreen() {
+
+}
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 0c86c2e8f872ece6b5174a54793255bceb56773d)
+++ b/app/src/main/AndroidManifest.xml	(date 1741427904173)
@@ -3,6 +3,7 @@
     xmlns:tools="http://schemas.android.com/tools">
 
     <application
+        android:name=".MyApplication"
         android:allowBackup="true"
         android:dataExtractionRules="@xml/data_extraction_rules"
         android:fullBackupContent="@xml/backup_rules"
@@ -13,9 +14,8 @@
         android:theme="@style/Theme.JetpackCompose"
         tools:targetApi="31">
         <activity
-            android:name=".MainActivity"
+            android:name=".activity.MainActivity"
             android:exported="true"
-            android:label="@string/app_name"
             android:theme="@style/Theme.JetpackCompose">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
Index: app/src/main/java/com/example/jetpackcompose/toast/Toast.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/jetpackcompose/toast/Toast.kt b/app/src/main/java/com/example/jetpackcompose/toast/Toast.kt
new file mode 100644
--- /dev/null	(date 1741434303357)
+++ b/app/src/main/java/com/example/jetpackcompose/toast/Toast.kt	(date 1741434303357)
@@ -0,0 +1,33 @@
+package com.example.jetpackcompose.toast
+
+import android.content.Context
+import android.graphics.Color
+import android.graphics.drawable.GradientDrawable
+import android.view.Gravity
+import android.widget.LinearLayout
+import android.widget.TextView
+import android.widget.Toast
+
+fun Context.showCustomToast(message: String, isLong: Boolean = false) {
+    val toast = Toast.makeText(this, message, if (isLong) Toast.LENGTH_LONG else Toast.LENGTH_SHORT)
+    val layout = LinearLayout(this).apply {
+        orientation = LinearLayout.HORIZONTAL
+        gravity = Gravity.CENTER
+        setPadding(32, 16, 32, 16)
+        background = GradientDrawable().apply {
+            cornerRadius = 24f
+            setColor(Color.parseColor("#FF393939"))
+        }
+    }
+    val textView = TextView(this).apply {
+        text = message
+        setTextColor(Color.WHITE)
+        textSize = 16f
+        gravity = Gravity.CENTER
+        setPadding(16, 8, 16, 8)
+    }
+    layout.addView(textView)
+
+    toast.view = layout
+    toast.show()
+}
\ No newline at end of file
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision 0c86c2e8f872ece6b5174a54793255bceb56773d)
+++ b/build.gradle.kts	(date 1741359666564)
@@ -2,4 +2,6 @@
 plugins {
     alias(libs.plugins.android.application) apply false
     alias(libs.plugins.jetbrains.kotlin.android) apply false
+    id("com.google.dagger.hilt.android") version "2.51.1" apply false
+    id("com.google.devtools.ksp") version "2.0.21-1.0.27" apply false
 }
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 0c86c2e8f872ece6b5174a54793255bceb56773d)
+++ b/app/build.gradle.kts	(date 1741360718461)
@@ -1,11 +1,14 @@
 plugins {
     alias(libs.plugins.android.application)
     alias(libs.plugins.jetbrains.kotlin.android)
+    id("kotlin-kapt")
+    id("com.google.dagger.hilt.android")
+    id("com.google.devtools.ksp")
 }
 
 android {
     namespace = "com.example.jetpackcompose"
-    compileSdk = 34
+    compileSdk = 35
 
     defaultConfig {
         applicationId = "com.example.jetpackcompose"
@@ -47,6 +50,10 @@
             excludes += "/META-INF/{AL2.0,LGPL2.1}"
         }
     }
+
+    kapt {
+        correctErrorTypes = true
+    }
 }
 
 dependencies {
@@ -66,4 +73,16 @@
     androidTestImplementation(libs.androidx.ui.test.junit4)
     debugImplementation(libs.androidx.ui.tooling)
     debugImplementation(libs.androidx.ui.test.manifest)
+
+    implementation("com.google.dagger:hilt-android:2.51.1")
+    kapt("com.google.dagger:hilt-android-compiler:2.51.1")
+    implementation("com.google.accompanist:accompanist-pager:0.31.1-alpha")
+
+    val room_version = "2.6.1"
+    implementation("androidx.room:room-runtime:$room_version")
+    implementation("androidx.room:room-ktx:$room_version")
+    kapt("androidx.room:room-compiler:$room_version")
+
+
+    implementation("androidx.hilt:hilt-navigation-compose:1.0.0")
 }
\ No newline at end of file
